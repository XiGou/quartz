<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>😄 Jorge&#039;s Digital Garden</title>
      <link>https://quartz.19960312.xyz</link>
      <description>Last 10 notes on 😄 Jorge&#039;s Digital Garden</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>Alpine Linux Usage</title>
    <link>https://quartz.19960312.xyz/Knowledges/Linux/Alpine</link>
    <guid>https://quartz.19960312.xyz/Knowledges/Linux/Alpine</guid>
    <description>Install setup-alpine when setting apk mirror, don’t use auto select fastest mirror, it takes a long time.</description>
    <pubDate>Tue, 22 Apr 2025 08:19:15 GMT</pubDate>
  </item><item>
    <title>Mount iso as yum repo</title>
    <link>https://quartz.19960312.xyz/Knowledges/Linux/Mount-iso-as-yum-repo</link>
    <guid>https://quartz.19960312.xyz/Knowledges/Linux/Mount-iso-as-yum-repo</guid>
    <description>要将 CentOS ISO 挂载为本地软件包仓库（repo），可以按照以下步骤进行操作： 创建一个目录来挂载 ISO 文件： sudo mkdir /mnt/iso 这将在 /mnt/iso 目录下创建一个用于挂载 ISO 的目录。 挂载 CentOS ISO 文件到指定目录： sudo mount -o loop /path/to/centos.iso /mnt/iso 将 /path/to/centos.iso 替换为实际的 CentOS ISO 文件路径。这将将 ISO 文件挂载到 /mnt/iso 目录下。 创建一个新的 repo 配置文件： sudo vi /etc/yum.repo...</description>
    <pubDate>Tue, 22 Apr 2025 08:19:15 GMT</pubDate>
  </item><item>
    <title>RPM</title>
    <link>https://quartz.19960312.xyz/Knowledges/Linux/RPM</link>
    <guid>https://quartz.19960312.xyz/Knowledges/Linux/RPM</guid>
    <description>How to check RPM Dependencies 有以下几种方法可以查看一个RPM软件包的依赖关系: 使用rpm命令的-qR参数 rpm -qR package.rpm 可以查看直接依赖的软件包。 使用yum本地仓库 yum deplist package.rpm 可以查看详细的依赖树信息。 解开RPM包查看spec文件 每一个RPM软件包里都包含一个spec文件,可以直接查看其中的依赖声明。 查看RPM数据库 yumdownloader --resolve package.rpm 可以在本地yum数据库中解析所有依赖关系。 使用rpmlint检查包 rpmlint package....</description>
    <pubDate>Tue, 22 Apr 2025 08:19:15 GMT</pubDate>
  </item><item>
    <title>nc 命令</title>
    <link>https://quartz.19960312.xyz/Knowledges/Linux/nc-%E5%91%BD%E4%BB%A4</link>
    <guid>https://quartz.19960312.xyz/Knowledges/Linux/nc-%E5%91%BD%E4%BB%A4</guid>
    <description>一个服务仅仅监听 127.0.0.1， 我如何将外部请求通过 nc 转发过去 你可以使用 nc（Netcat）来实现简单的端口转发，将外部请求转发到仅监听 127.0.0.1 的服务。以下是一个常见的实现方法： 示例 假设服务监听在 127.0.0.1:8080，你希望将外部的 0.0.0.0:9090 转发到 127.0.0.1:8080。 启动转发： 在终端运行以下命令： nc -lk -p 9090 -c &quot;nc 127.0.0.1 8080&quot; -l：监听模式。 -k：保持连接（允许多个客户端连接）。 -p 9090：监听外部的端口 9090。 -c &quot;nc...</description>
    <pubDate>Tue, 22 Apr 2025 08:19:15 GMT</pubDate>
  </item><item>
    <title>analyze packages imported by python project</title>
    <link>https://quartz.19960312.xyz/Knowledges/Python/analyze-packages-imported-by-python-project</link>
    <guid>https://quartz.19960312.xyz/Knowledges/Python/analyze-packages-imported-by-python-project</guid>
    <description>import os import re def analyze_imports(project_path): imports = set() for root, dirs, files in os.walk(project_path): for file in files: if file.endswith(&quot;.py&quot;): file_path = os.path.join(root, file) with open(file_path, &quot;r&quot;) as f: lines = f.readlines() for line in lines: if line...</description>
    <pubDate>Tue, 22 Apr 2025 08:19:15 GMT</pubDate>
  </item><item>
    <title>Calibra: Ebook Management System</title>
    <link>https://quartz.19960312.xyz/Knowledges/Software-Usage/Calibra</link>
    <guid>https://quartz.19960312.xyz/Knowledges/Software-Usage/Calibra</guid>
    <description> Github Repo GitHub - janeczku/calibre-web: :books: Web app for browsing, reading and downloading eBooks stored in a Calibre database Webui can be found at http://your-ip:8083 --- services: calibre-web: image: lscr.io/linuxserver/calibre-web:latest container_name: calibre-web environment: - PUID=100...</description>
    <pubDate>Tue, 22 Apr 2025 08:19:15 GMT</pubDate>
  </item><item>
    <title>Git Format-Patch</title>
    <link>https://quartz.19960312.xyz/Knowledges/Software-Usage/Git-Format-Patch</link>
    <guid>https://quartz.19960312.xyz/Knowledges/Software-Usage/Git-Format-Patch</guid>
    <description>TL;DR; 生成 patch：git format-patch &lt;commit-range&gt;。 传输：手动或用工具（如 scp）。 应用： git apply：只应用更改。 git am：应用并创建 commit（推荐）。 这个方法简单高效，适合跨机器共享代码。 在 Git 中，你可以将某个 commit 转换为 patch 文件，然后传输到另一台机器上并应用（apply）。这个过程通常用于在无法直接推送（push）或拉取（pull）的情况下共享更改，例如通过电子邮件或手动文件传输。以下是具体的步骤和命令： 步骤 1：在源机器上生成 Patch 文件 使用 git format-...</description>
    <pubDate>Tue, 22 Apr 2025 08:19:15 GMT</pubDate>
  </item><item>
    <title>Git Proxy Configuration</title>
    <link>https://quartz.19960312.xyz/Knowledges/Software-Usage/Git-Proxy-Configuration</link>
    <guid>https://quartz.19960312.xyz/Knowledges/Software-Usage/Git-Proxy-Configuration</guid>
    <description>Git 配置代理的方法 Git 支持 HTTP(S) 代理 和 SOCKS 代理，可以针对全局或单个仓库进行配置。 1.</description>
    <pubDate>Tue, 22 Apr 2025 08:19:15 GMT</pubDate>
  </item><item>
    <title>Git</title>
    <link>https://quartz.19960312.xyz/Knowledges/Software-Usage/Git</link>
    <guid>https://quartz.19960312.xyz/Knowledges/Software-Usage/Git</guid>
    <description>Config email and username: git config --global user.name &quot;username&quot; git config --global user.email useremail@qq.com git config --global core.editor vim git config --global credential.helper store git config --list HTTP Credential 首先打开 git config --global credential.helper store 然后生成一个 PTA ...</description>
    <pubDate>Tue, 22 Apr 2025 08:19:15 GMT</pubDate>
  </item><item>
    <title>Nmap</title>
    <link>https://quartz.19960312.xyz/Knowledges/Software-Usage/Nmap</link>
    <guid>https://quartz.19960312.xyz/Knowledges/Software-Usage/Nmap</guid>
    <description>Nmap（Network Mapper）是一个用于网络探测和安全评估的强大工具。要扫描常见的端口，你可以使用以下命令： nmap -p 1-1024 &lt;目标IP或主机名&gt;.</description>
    <pubDate>Tue, 22 Apr 2025 08:19:15 GMT</pubDate>
  </item>
    </channel>
  </rss>